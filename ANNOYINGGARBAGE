using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApplication1
{
    public partial class JaredLynch : Form
    {
        DataSet dsXMLInput = new DataSet();
        bool boolValue;
        public JaredLynch()
        {
            InitializeComponent();
        }

        private void InitializeUI()
        {
            txtSourceFile.Text = "";
            txtSourceFile.Enabled = false;
            cboColumns.Enabled = false;
            cboTables.Enabled = false;
            txtValue.Enabled = false;
            cboColumns.Text = "";
            cboTables.Text = "";
            txtValue.Text = "";
            btnColumnsEdit.Enabled = false;
            btnTablesEdit.Enabled = false;
            btnSave.Enabled = false;


            






        }







        private void JaredLynch_Load(object sender, EventArgs e)
        {
            InitializeUI();


        }

        private void btnDone_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnBrowse_Click(object sender, EventArgs e)
        {
            InitializeUI();
            //DataSet dsXMLInput = new DataSet();
            OpenFileDialog browseFileDialog = new OpenFileDialog();
            browseFileDialog.DefaultExt = "xml";
            browseFileDialog.Filter = "XML File (*.xml) |*.xml|All Files (*.*)| (*.*)";
            browseFileDialog.Title = "Please select source file:";
            browseFileDialog.FileName = "";
            if (browseFileDialog.ShowDialog() == DialogResult.OK)
            {
                if (browseFileDialog.FileName.Trim().IndexOf(".xml") != -1)
                {
                    txtSourceFile.Text = browseFileDialog.FileName.Trim();
                    dsXMLInput.ReadXml(browseFileDialog.FileName.Trim());

                }
                else
                {
                    MessageBox.Show(browseFileDialog.FileName + "\n does not appear to be a valid XML file.", "Invalid Source File", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                if (txtSourceFile.Text != "")
                {
                    cboTables.Enabled = true;
                }


                DataTableCollection Tables = dsXMLInput.Tables;
                foreach (DataTable Table in Tables)
                {
                    DataRowCollection TableRows = Table.Rows;
                    object[] objTableRows = new object[TableRows.Count];
                    TableRows.CopyTo(objTableRows, 0);
                    DataRow dr = (DataRow)objTableRows[0];
                    object[] RowValues = new object[dr.ItemArray.GetLength(0)];
                    RowValues = dr.ItemArray;
                    cboTables.Items.Add(Table.TableName);
                    //Below is failed attempts at making this work. lol
                    /*cboTables.DataSource = dsXMLInput.Tables[0];
                    cboTables.BindingContext = this.BindingContext;
                    cboTables.DisplayMember = dsXMLInput.Tables.ToString();*/


                }

              

            }

        }


       /* public void PopulateDataSet(ref DataSet dsXMLInput)
        {
            DataColumnCollection Columns = dsXMLInput.Tables.Columns;
            foreach (DataColumn Column in Columns)
            {
                DataColumnCollection TableColumns = Table.Columns;
                object[] objTableColumns = new object[TableColumns.Count];
                TableColumns.CopyTo(objTableColumns, 0);
                DataRow dr = (DataRow)objTableColumns[0];
                object[] ColumnValues = new object[dr.ItemArray.GetLength(0)];
                ColumnValues = dr.ItemArray;
                cboColumns.Items.Add(Table.TableName);
            }
         }
         */

            private void PopulateDataSet(ref DataSet dsXMLInput)
        {
            cboColumns.Items.Clear();
            int intTableIndex = dsXMLInput.Tables.IndexOf(cboTables.Text);
            DataColumnCollection Columns = dsXMLInput.Tables[intTableIndex].Columns;
            foreach(DataColumn Column in Columns)
            {
                cboColumns.Items.Add(Column.ToString());
            }
        }



        private void btnTablesEdit_Click(object sender, EventArgs e)
        {

        }





        private void cboTables_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboTables.Text != "" && cboColumns.Text == "")
            {
                cboColumns.Enabled = true;
                PopulateDataSet(ref dsXMLInput);
                txtValue.Text = "";
                
            }
            else
            {
                cboColumns.Text = "";
                cboColumns.Enabled = true;
                txtValue.Enabled = false;
                txtValue.Text = "";
                
            }


        }

        

        private void cboColumns_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboColumns.Text != "" && txtValue.Text == "")
            {
                
                txtValue.Enabled = true;
                int intTableIndex = dsXMLInput.Tables.IndexOf(cboTables.Text);
                txtValue.Text = dsXMLInput.Tables[intTableIndex].Rows[0][cboColumns.Text].ToString();
                

            }
           else
            {
               txtValue.Text = "";
               txtValue.Enabled = false;
               


            }



        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.DefaultExt = "xml";
            saveFileDialog.Filter = "XML File (*.xml) | *.xml|All Files (*.*)|(*.*)";
            saveFileDialog.Title = "Save File As...";
            saveFileDialog.FileName = "";
            saveFileDialog.ShowDialog();

        }

        private void txtValue_TextChanged(object sender, EventArgs e)
        {
            if((txtValue.Enabled) && (boolValue == true))
            {
                btnSave.Enabled = true;
                boolValue = false;
                return;
            }
            else
            {
                boolValue = true;
            }
        }
    }
}
